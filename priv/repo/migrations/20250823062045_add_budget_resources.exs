defmodule RubberDuck.Repo.Migrations.AddBudgetResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:user_preferences, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "user_preferences_user_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:preference_key, :text, null: false)
      add(:value, :text, null: false)
      add(:category, :text, null: false)
      add(:source, :text, null: false, default: "manual")

      add(:last_modified, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:modified_by, :text)
      add(:active, :boolean, null: false, default: true)
      add(:notes, :text)
      add(:auto_generated, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:system_defaults, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:preference_key, :text, null: false)
      add(:default_value, :text, null: false)
      add(:data_type, :text, null: false, default: "string")
      add(:category, :text, null: false)
      add(:subcategory, :text)
      add(:description, :text, null: false)
      add(:constraints, :map)
      add(:sensitive, :boolean, null: false, default: false)
      add(:version, :bigint, null: false, default: 1)
      add(:deprecated, :boolean, null: false, default: false)
      add(:replacement_key, :text)
      add(:display_order, :bigint)
      add(:access_level, :text, null: false, default: "user")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:system_defaults, [:preference_key],
             name: "system_defaults_unique_preference_key_index"
           )

    alter table(:user_preferences) do
      modify(
        :preference_key,
        references(:system_defaults,
          column: :preference_key,
          name: "user_preferences_preference_key_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    create unique_index(:user_preferences, [:user_id, :preference_key],
             name: "user_preferences_unique_user_preference_index"
           )

    create table(:project_preferences_enabled, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:project_id, :uuid, null: false)
      add(:enabled, :boolean, null: false, default: false)
      add(:enabled_categories, {:array, :text}, null: false, default: [])
      add(:disabled_categories, {:array, :text}, null: false, default: [])
      add(:enablement_reason, :text, null: false)

      add(
        :enabled_by,
        references(:users,
          column: :id,
          name: "project_preferences_enabled_enabled_by_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :nilify_all
        ),
        null: false
      )

      add(:enabled_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:last_override_at, :utc_datetime_usec)
      add(:max_overrides, :bigint)
      add(:approval_required, :boolean, null: false, default: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:project_preferences_enabled, [:project_id],
             name: "project_preferences_enabled_unique_project_index"
           )

    create table(:project_preferences, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:project_id, :uuid, null: false)

      add(
        :preference_key,
        references(:system_defaults,
          column: :preference_key,
          name: "project_preferences_preference_key_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:value, :text, null: false)
      add(:inherits_user, :boolean, null: false, default: false)
      add(:override_reason, :text, null: false)

      add(
        :approved_by,
        references(:users,
          column: :id,
          name: "project_preferences_approved_by_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :nilify_all
        )
      )

      add(:approved_at, :utc_datetime_usec)

      add(:effective_from, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:effective_until, :utc_datetime_usec)
      add(:priority, :bigint, null: false, default: 5)
      add(:category, :text, null: false)
      add(:temporary, :boolean, null: false, default: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:project_preferences, [:project_id, :preference_key],
             name: "project_preferences_unique_project_preference_index"
           )

    create table(:preference_validations, primary_key: false) do
      add(:validation_id, :uuid,
        null: false,
        default: fragment("gen_random_uuid()"),
        primary_key: true
      )

      add(
        :preference_key,
        references(:system_defaults,
          column: :preference_key,
          name: "preference_validations_preference_key_fkey",
          type: :text,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:validation_type, :text, null: false)
      add(:validation_rule, :map, null: false)
      add(:error_message, :text, null: false)
      add(:severity, :text, null: false, default: "error")
      add(:active, :boolean, null: false, default: true)
      add(:order, :bigint, null: false, default: 0)
      add(:stop_on_failure, :boolean, null: false, default: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:preference_templates, primary_key: false) do
      add(:template_id, :uuid,
        null: false,
        default: fragment("gen_random_uuid()"),
        primary_key: true
      )

      add(:name, :text, null: false)
      add(:description, :text, null: false)
      add(:category, :text, null: false)
      add(:preferences, :map, null: false)
      add(:template_type, :text, null: false, default: "private")

      add(
        :created_by,
        references(:users,
          column: :id,
          name: "preference_templates_created_by_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :nilify_all
        ),
        null: false
      )

      add(:version, :bigint, null: false, default: 1)
      add(:usage_count, :bigint, null: false, default: 0)
      add(:rating, :decimal)
      add(:rating_count, :bigint, null: false, default: 0)
      add(:tags, {:array, :text}, null: false, default: [])
      add(:compatible_versions, {:array, :text}, null: false)
      add(:featured, :boolean, null: false, default: false)
      add(:deprecated, :boolean, null: false, default: false)

      add(
        :replacement_template_id,
        references(:preference_templates,
          column: :template_id,
          name: "preference_templates_replacement_template_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:preference_templates, [:name, :created_by],
             name: "preference_templates_unique_template_name_index"
           )

    create table(:preference_history, primary_key: false) do
      add(:change_id, :uuid,
        null: false,
        default: fragment("gen_random_uuid()"),
        primary_key: true
      )

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "preference_history_user_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      add(:project_id, :uuid)

      add(
        :preference_key,
        references(:system_defaults,
          column: :preference_key,
          name: "preference_history_preference_key_fkey",
          type: :text,
          prefix: "public"
        ),
        null: false
      )

      add(:old_value, :text)
      add(:new_value, :text)
      add(:change_type, :text, null: false)
      add(:change_reason, :text)

      add(
        :changed_by,
        references(:users,
          column: :id,
          name: "preference_history_changed_by_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :nilify_all
        ),
        null: false
      )

      add(:changed_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:rollback_possible, :boolean, null: false, default: true)

      add(
        :source_template_id,
        references(:preference_templates,
          column: :template_id,
          name: "preference_history_source_template_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :nilify_all
        )
      )

      add(:batch_id, :uuid)
      add(:ip_address, :text)
      add(:user_agent, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:preference_categories, primary_key: false) do
      add(:category_id, :uuid,
        null: false,
        default: fragment("gen_random_uuid()"),
        primary_key: true
      )

      add(:name, :text, null: false)
      add(:display_name, :text, null: false)

      add(
        :parent_category_id,
        references(:preference_categories,
          column: :category_id,
          name: "preference_categories_parent_category_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )

      add(:description, :text, null: false)
      add(:display_order, :bigint, null: false, default: 0)
      add(:icon, :text)
      add(:color, :text)
      add(:default_access_level, :text, null: false, default: "user")
      add(:documentation_url, :text)
      add(:tags, {:array, :text}, null: false, default: [])

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:preference_categories, [:name],
             name: "preference_categories_unique_category_name_index"
           )

    create unique_index(:preference_categories, [:display_name],
             name: "preference_categories_unique_display_name_index"
           )

    create table(:budget_usage, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:budget_configuration_id, :uuid, null: false)
      add(:period_start, :utc_datetime, null: false)
      add(:period_end, :utc_datetime, null: false)
      add(:current_cost, :decimal, null: false, default: "0.0")
      add(:current_tokens, :bigint, null: false, default: 0)
      add(:current_operations, :bigint, null: false, default: 0)
      add(:status, :text, null: false, default: "within_budget")
      add(:last_updated, :utc_datetime, null: false)
      add(:peak_cost, :decimal, null: false, default: "0.0")
      add(:peak_tokens, :bigint, null: false, default: 0)
      add(:peak_operations, :bigint, null: false, default: 0)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:budget_overrides, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:budget_configuration_id, :uuid, null: false)
      add(:override_type, :text, null: false, default: "emergency")
      add(:override_amount, :decimal, null: false)
      add(:override_reason, :text, null: false)
      add(:status, :text, null: false, default: "pending_approval")
      add(:active, :boolean, null: false, default: false)
      add(:expires_at, :utc_datetime, null: false)
      add(:requested_by_user_id, :uuid)
      add(:approved_by_user_id, :uuid)
      add(:approved_at, :utc_datetime)
      add(:approval_notes, :text)
      add(:revoked_at, :utc_datetime)
      add(:revocation_reason, :text)
      add(:usage_amount, :decimal, null: false, default: "0.0")
      add(:extension_count, :bigint, null: false, default: 0)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:budget_limits, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:budget_configuration_id, :uuid, null: false)
      add(:limit_type, :text, null: false)
      add(:soft_limit, :decimal, null: false)
      add(:hard_limit, :decimal, null: false)
      add(:grace_period_minutes, :bigint, null: false, default: 0)
      add(:active, :boolean, null: false, default: true)
      add(:notes, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:budget_events, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:budget_configuration_id, :uuid, null: false)
      add(:event_type, :text, null: false)
      add(:event_data, :map, null: false)
      add(:severity, :text, null: false, default: "medium")
      add(:triggered_by, :text)
      add(:triggered_by_user_id, :uuid)
      add(:occurred_at, :utc_datetime, null: false)
      add(:correlation_id, :text)
      add(:tags, {:array, :text})
      add(:resolved, :boolean, null: false, default: false)
      add(:resolved_at, :utc_datetime)
      add(:resolved_by_user_id, :uuid)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:budget_configurations, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
    end

    alter table(:budget_usage) do
      modify(
        :budget_configuration_id,
        references(:budget_configurations,
          column: :id,
          name: "budget_usage_budget_configuration_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    create unique_index(:budget_usage, [:budget_configuration_id, :period_start, :period_end],
             name: "budget_usage_unique_config_period_index"
           )

    alter table(:budget_overrides) do
      modify(
        :budget_configuration_id,
        references(:budget_configurations,
          column: :id,
          name: "budget_overrides_budget_configuration_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    alter table(:budget_limits) do
      modify(
        :budget_configuration_id,
        references(:budget_configurations,
          column: :id,
          name: "budget_limits_budget_configuration_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    create unique_index(:budget_limits, [:budget_configuration_id, :limit_type],
             name: "budget_limits_unique_config_limit_type_index"
           )

    alter table(:budget_events) do
      modify(
        :budget_configuration_id,
        references(:budget_configurations,
          column: :id,
          name: "budget_events_budget_configuration_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        )
      )
    end

    alter table(:budget_configurations) do
      add(:scope_type, :text, null: false)
      add(:scope_id, :uuid)
      add(:category, :text)
      add(:enabled, :boolean, null: false, default: false)
      add(:period_type, :text, null: false, default: "monthly")
      add(:period_start, :date)
      add(:currency, :text, null: false, default: "USD")
      add(:timezone, :text, null: false, default: "UTC")

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:budget_configurations, [:scope_type, :scope_id, :category],
             name: "budget_configurations_unique_scope_category_index"
           )

    create table(:budget_alerts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)

      add(
        :budget_configuration_id,
        references(:budget_configurations,
          column: :id,
          name: "budget_alerts_budget_configuration_id_fkey",
          type: :uuid,
          prefix: "public",
          on_delete: :delete_all
        ),
        null: false
      )

      add(:threshold_percentage, :bigint, null: false)
      add(:alert_type, :text, null: false)
      add(:recipient_config, :map, null: false)
      add(:enabled, :boolean, null: false, default: true)
      add(:escalation_enabled, :boolean, null: false, default: false)
      add(:escalation_delay_minutes, :bigint)
      add(:escalation_config, :map)
      add(:max_alerts_per_hour, :bigint, null: false, default: 4)
      add(:message_template, :text)
      add(:include_forecast, :boolean, null: false, default: false)
      add(:include_recommendations, :boolean, null: false, default: true)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(
             :budget_alerts,
             [:budget_configuration_id, :threshold_percentage, :alert_type],
             name: "budget_alerts_unique_config_threshold_type_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:budget_alerts, [:budget_configuration_id, :threshold_percentage, :alert_type],
        name: "budget_alerts_unique_config_threshold_type_index"
      )
    )

    drop(constraint(:budget_alerts, "budget_alerts_budget_configuration_id_fkey"))

    drop(table(:budget_alerts))

    drop_if_exists(
      unique_index(:budget_configurations, [:scope_type, :scope_id, :category],
        name: "budget_configurations_unique_scope_category_index"
      )
    )

    alter table(:budget_configurations) do
      remove(:updated_at)
      remove(:inserted_at)
      remove(:timezone)
      remove(:currency)
      remove(:period_start)
      remove(:period_type)
      remove(:enabled)
      remove(:category)
      remove(:scope_id)
      remove(:scope_type)
    end

    drop(constraint(:budget_events, "budget_events_budget_configuration_id_fkey"))

    alter table(:budget_events) do
      modify(:budget_configuration_id, :uuid)
    end

    drop_if_exists(
      unique_index(:budget_limits, [:budget_configuration_id, :limit_type],
        name: "budget_limits_unique_config_limit_type_index"
      )
    )

    drop(constraint(:budget_limits, "budget_limits_budget_configuration_id_fkey"))

    alter table(:budget_limits) do
      modify(:budget_configuration_id, :uuid)
    end

    drop(constraint(:budget_overrides, "budget_overrides_budget_configuration_id_fkey"))

    alter table(:budget_overrides) do
      modify(:budget_configuration_id, :uuid)
    end

    drop_if_exists(
      unique_index(:budget_usage, [:budget_configuration_id, :period_start, :period_end],
        name: "budget_usage_unique_config_period_index"
      )
    )

    drop(constraint(:budget_usage, "budget_usage_budget_configuration_id_fkey"))

    alter table(:budget_usage) do
      modify(:budget_configuration_id, :uuid)
    end

    drop(table(:budget_configurations))

    drop(table(:budget_events))

    drop(table(:budget_limits))

    drop(table(:budget_overrides))

    drop(table(:budget_usage))

    drop_if_exists(
      unique_index(:preference_categories, [:display_name],
        name: "preference_categories_unique_display_name_index"
      )
    )

    drop_if_exists(
      unique_index(:preference_categories, [:name],
        name: "preference_categories_unique_category_name_index"
      )
    )

    drop(constraint(:preference_categories, "preference_categories_parent_category_id_fkey"))

    drop(table(:preference_categories))

    drop(constraint(:preference_history, "preference_history_user_id_fkey"))

    drop(constraint(:preference_history, "preference_history_preference_key_fkey"))

    drop(constraint(:preference_history, "preference_history_changed_by_fkey"))

    drop(constraint(:preference_history, "preference_history_source_template_id_fkey"))

    drop(table(:preference_history))

    drop_if_exists(
      unique_index(:preference_templates, [:name, :created_by],
        name: "preference_templates_unique_template_name_index"
      )
    )

    drop(constraint(:preference_templates, "preference_templates_created_by_fkey"))

    drop(constraint(:preference_templates, "preference_templates_replacement_template_id_fkey"))

    drop(table(:preference_templates))

    drop(constraint(:preference_validations, "preference_validations_preference_key_fkey"))

    drop(table(:preference_validations))

    drop_if_exists(
      unique_index(:project_preferences, [:project_id, :preference_key],
        name: "project_preferences_unique_project_preference_index"
      )
    )

    drop(constraint(:project_preferences, "project_preferences_preference_key_fkey"))

    drop(constraint(:project_preferences, "project_preferences_approved_by_fkey"))

    drop(table(:project_preferences))

    drop_if_exists(
      unique_index(:project_preferences_enabled, [:project_id],
        name: "project_preferences_enabled_unique_project_index"
      )
    )

    drop(constraint(:project_preferences_enabled, "project_preferences_enabled_enabled_by_fkey"))

    drop(table(:project_preferences_enabled))

    drop_if_exists(
      unique_index(:user_preferences, [:user_id, :preference_key],
        name: "user_preferences_unique_user_preference_index"
      )
    )

    drop(constraint(:user_preferences, "user_preferences_preference_key_fkey"))

    alter table(:user_preferences) do
      modify(:preference_key, :text)
    end

    drop_if_exists(
      unique_index(:system_defaults, [:preference_key],
        name: "system_defaults_unique_preference_key_index"
      )
    )

    drop(table(:system_defaults))

    drop(constraint(:user_preferences, "user_preferences_user_id_fkey"))

    drop(table(:user_preferences))
  end
end
